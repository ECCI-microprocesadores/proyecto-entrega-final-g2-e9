/*
 * Arduino - SX1278 LoRa Receptor para Sensor Reed Switch
 * Diseñado para recibir datos del sensor Reed switch transmitidos por PIC18F45K22
 * Decodifica paquetes estructurados de 6 bytes
 */

#include <SPI.h>
#include <LoRa.h>

// Definiciones de pines
#define LORA_SS_PIN     10
#define LORA_RESET_PIN  9
#define LORA_DIO0_PIN   2
#define LED_PIN         LED_BUILTIN

// Frecuencia óptima determinada por análisis empírico
#define LORA_FIXED_FREQUENCY  434.02   // MHz - Basado en los mejores resultados de recepción

// Configuración del módulo LoRa (debe coincidir exactamente con el PIC)
#define LORA_BANDWIDTH  125E3   // 125 kHz
#define LORA_SPREADING  7       // Spreading Factor 7
#define LORA_CODING_RATE 5      // Coding Rate 4/5
#define LORA_PREAMBLE   8       // 8 símbolos de preámbulo
#define LORA_SYNC_WORD  0x12    // Palabra de sincronización

// Configuración del receptor
#define EXPECTED_PACKET_SIZE  6     // El PIC envía paquetes de 6 bytes
#define DEBUG_MODE           true   // Activar para información detallada

// Estados del sensor Reed (debe coincidir con el PIC)
#define REED_OPEN    1    // Sensor abierto (sin imán)
#define REED_CLOSED  0    // Sensor cerrado (con imán)

// Estructura para decodificar el paquete del sensor (debe coincidir con el PIC)
typedef struct {
    uint8_t deviceID;        // ID del dispositivo (identificador único)
    uint8_t sensorType;      // Tipo de sensor (0x01 = Reed switch)
    uint8_t sensorState;     // Estado del sensor (0 = cerrado, 1 = abierto)
    uint8_t counter;         // Contador de activaciones
    uint16_t timestamp;      // Timestamp simple (incrementa cada segundo)
} SensorPacket;

// Variables globales
unsigned int packetsReceived = 0;
unsigned int badPacketsReceived = 0;
float currentFrequency = LORA_FIXED_FREQUENCY;

// Estadísticas del sensor
uint8_t lastDeviceID = 0;
uint8_t lastSensorState = 255; // Valor inválido para detectar primer paquete
uint8_t lastCounter = 0;
uint16_t lastTimestamp = 0;

void setup() {
  // Inicializar comunicación serial
  Serial.begin(9600);
  while (!Serial);
  Serial.println("\n\n=== Receptor LoRa para Sensor Reed Switch ===");
  Serial.println("PIC18F45K22 -> Arduino via SX1278 LoRa");
  Serial.println("Esperando paquetes de 6 bytes...\n");
  
  // Configurar pin LED
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  
  // Indicar inicio (un parpadeo)
  digitalWrite(LED_PIN, HIGH);
  delay(100);
  digitalWrite(LED_PIN, LOW);
  delay(900);
  
  // Configurar SPI manualmente para asegurar compatibilidad
  SPI.begin();
  
  // Configurar módulo LoRa
  LoRa.setPins(LORA_SS_PIN, LORA_RESET_PIN, LORA_DIO0_PIN);
  
  // Realizar reset completo del hardware
  Serial.println("Realizando reset del módulo SX1278...");
  digitalWrite(LORA_RESET_PIN, LOW);
  delay(10);
  digitalWrite(LORA_RESET_PIN, HIGH);
  delay(10);
  
  // Inicializar LoRa con la frecuencia óptima
  Serial.println("Inicializando módulo LoRa...");
  if (!LoRa.begin(LORA_FIXED_FREQUENCY * 1E6)) {
    Serial.println("¡Falló! Intentando de nuevo...");
    delay(1000);
    
    // Segundo intento con reset
    digitalWrite(LORA_RESET_PIN, LOW);
    delay(10);
    digitalWrite(LORA_RESET_PIN, HIGH);
    delay(10);
    
    if (!LoRa.begin(433.0E6)) {
      Serial.println("¡Error crítico! Compruebe las conexiones del hardware.");
      indicateError();
      while (true); // Detener ejecución
    }
  }
  
  // Configurar módulo con parámetros exactos del PIC
  configureLoRaModule();
  
  Serial.println("Receptor inicializado correctamente.");
  printCurrentConfig();
  Serial.println("Esperando transmisiones del sensor Reed switch...\n");
}

void loop() {
  // Comprobar si hay paquetes disponibles
  int packetSize = LoRa.parsePacket();
  
  if (packetSize) {
    // Obtener métricas de calidad de señal
    int rssi = LoRa.packetRssi();
    float snr = LoRa.packetSnr();
    
    Serial.println("================================");
    Serial.print("PAQUETE RECIBIDO - Tamaño: ");
    Serial.print(packetSize);
    Serial.println(" bytes");
    Serial.print("RSSI: ");
    Serial.print(rssi);
    Serial.print(" dBm | SNR: ");
    Serial.print(snr, 1);
    Serial.println(" dB");
    Serial.println("================================");
    
    // Leer todos los bytes disponibles
    uint8_t receivedData[10] = {0}; // Buffer para hasta 10 bytes
    int byteCount = 0;
    
    while (LoRa.available() && byteCount < 10) {
      receivedData[byteCount++] = LoRa.read();
    }
    
    // Mostrar datos en crudo si está habilitado el debug
    if (DEBUG_MODE) {
      Serial.print("Datos en crudo: ");
      for (int i = 0; i < byteCount; i++) {
        Serial.print("0x");
        if (receivedData[i] < 16) Serial.print("0");
        Serial.print(receivedData[i], HEX);
        Serial.print(" ");
      }
      Serial.println();
    }
    
    // Verificar si el paquete tiene el tamaño esperado
    if (byteCount == EXPECTED_PACKET_SIZE) {
      // Decodificar paquete del sensor
      SensorPacket sensorData;
      sensorData.deviceID = receivedData[0];
      sensorData.sensorType = receivedData[1];
      sensorData.sensorState = receivedData[2];
      sensorData.counter = receivedData[3];
      sensorData.timestamp = (receivedData[4] << 8) | receivedData[5]; // MSB + LSB
      
      // Validar que es un paquete de sensor Reed switch
      if (sensorData.sensorType == 0x01) {
        packetsReceived++;
        processSensorData(&sensorData, rssi, snr);
        indicateSuccess();
      } else {
        Serial.print("Tipo de sensor desconocido: 0x");
        Serial.println(sensorData.sensorType, HEX);
        badPacketsReceived++;
        indicateError();
      }
    } else {
      Serial.print("Tamaño de paquete incorrecto. Esperado: ");
      Serial.print(EXPECTED_PACKET_SIZE);
      Serial.print(" bytes, Recibido: ");
      Serial.print(byteCount);
      Serial.println(" bytes");
      badPacketsReceived++;
      indicateError();
    }
    
    Serial.println(); // Línea en blanco para separar paquetes
  }
}

/**
 * Procesa y muestra los datos del sensor Reed switch
 */
void processSensorData(SensorPacket* sensor, int rssi, float snr) {
  Serial.println("--- SENSOR REED SWITCH ---");
  Serial.print("Device ID: 0x");
  Serial.println(sensor->deviceID, HEX);
  
  Serial.print("Estado: ");
  if (sensor->sensorState == REED_CLOSED) {
    Serial.println("CERRADO (imán presente)");
  } else if (sensor->sensorState == REED_OPEN) {
    Serial.println("ABIERTO (sin imán)");
  } else {
    Serial.print("DESCONOCIDO (");
    Serial.print(sensor->sensorState);
    Serial.println(")");
  }
  
  Serial.print("Activaciones: ");
  Serial.println(sensor->counter);
  
  Serial.print("Tiempo: ");
  Serial.print(sensor->timestamp);
  Serial.println(" seg");
  
  // Mostrar solo cambios importantes
  if (lastDeviceID == sensor->deviceID && lastSensorState != sensor->sensorState && lastSensorState != 255) {
    Serial.print(">>> CAMBIO: ");
    if (lastSensorState == REED_OPEN && sensor->sensorState == REED_CLOSED) {
      Serial.println("Imán DETECTADO");
    } else if (lastSensorState == REED_CLOSED && sensor->sensorState == REED_OPEN) {
      Serial.println("Imán REMOVIDO");
    }
  }
  
  // Actualizar valores para la próxima comparación
  lastDeviceID = sensor->deviceID;
  lastSensorState = sensor->sensorState;
  lastCounter = sensor->counter;
  lastTimestamp = sensor->timestamp;
}

/**
 * Configurar el módulo LoRa con parámetros exactos del PIC
 */
void configureLoRaModule() {
  // Poner en modo sleep primero (como hace el PIC)
  LoRa.sleep();
  delay(10);
  
  // Configurar con valores exactos del PIC
  LoRa.setSignalBandwidth(LORA_BANDWIDTH);
  LoRa.setSpreadingFactor(LORA_SPREADING);
  LoRa.setCodingRate4(LORA_CODING_RATE);
  LoRa.setPreambleLength(LORA_PREAMBLE);
  LoRa.setSyncWord(LORA_SYNC_WORD);
  LoRa.enableCrc();
  
  // Configurar la frecuencia exacta
  LoRa.setFrequency(LORA_FIXED_FREQUENCY * 1E6);
  
  // Configuración adicional
  LoRa.setTxPower(14);  // No usado para recepción, pero ajustamos para compatibilidad
  
  // Cambiar al modo STANDBY después de configurar (como en el PIC)
  LoRa.idle();
  delay(10);
  
  Serial.println("Módulo configurado con parámetros del PIC.");
}

/**
 * Muestra la configuración actual del módulo
 */
void printCurrentConfig() {
  Serial.println("\n=== CONFIGURACIÓN ACTUAL ===");
  Serial.print("Frecuencia: ");
  Serial.print(currentFrequency, 3);
  Serial.println(" MHz");
  Serial.print("Ancho de banda: ");
  Serial.print(LORA_BANDWIDTH / 1000);
  Serial.println(" kHz");
  Serial.print("Spreading Factor: ");
  Serial.println(LORA_SPREADING);
  Serial.print("Coding Rate: 4/");
  Serial.println(LORA_CODING_RATE);
  Serial.print("Preámbulo: ");
  Serial.print(LORA_PREAMBLE);
  Serial.println(" símbolos");
  Serial.print("Palabra de sincronización: 0x");
  Serial.println(LORA_SYNC_WORD, HEX);
  Serial.print("Tamaño de paquete esperado: ");
  Serial.print(EXPECTED_PACKET_SIZE);
  Serial.println(" bytes");
  Serial.println("CRC: Activado");
  Serial.println("=============================\n");
}

/**
 * Indica éxito con patrón LED (3 parpadeos)
 */
void indicateSuccess() {
  for (int i = 0; i < 3; i++) {
    digitalWrite(LED_PIN, HIGH);
    delay(200);
    digitalWrite(LED_PIN, LOW);
    delay(200);
  }
}

/**
 * Indica error con patrón LED (SOS corto)
 */
void indicateError() {
  // Patrón de error simplificado
  for (int i = 0; i < 2; i++) {
    digitalWrite(LED_PIN, HIGH);
    delay(100);
    digitalWrite(LED_PIN, LOW);
    delay(100);
  }
}